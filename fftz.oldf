@process directive(' dir:') novector
c fftz => Large radix - not vectorizable
c
      subroutine fftz ( d, lens, ndim, coeff, irev )
c
c d       = array to be transformed of length product lens
c lens    = log2 length of each dimension
c ndim    = number of dimensions
c coeff   = array of length at least (max 2**lens)/2
c irev    = integer work array of length at least max 2**lens
c
      parameter ( nfmax = 50, npr = 2 )
      complex d(0:*), coeff(0:*), temp, t
      complex d4(0:3,2), d16(0:15,2)
      dimension lens(ndim), irev(0:*), ifac(nfmax), ipr(npr),
     *   ir4(0:3), ir16(0:15)
      data ipr/16, 2/
c
c Find total length, max length, sum of log of dimension,
c and largest log dimension
c
      call reorder ( 4, ir4 )
      call reorder ( 16, ir16 )
      lentotl = 0
      maxlenl = 0
      do i = 1, ndim
	 lentotl = lentotl + lens(i)
	 maxlenl = max(maxlenl,lens(i))
      enddo
      lentot = 2**lentotl
      maxlen = 2**maxlenl 
c
c Main loop over dimensions
c
      lip = 0
      lop = lentot
      do idim = 1, ndim
         lensidim = 2**lens(idim)
         ls = lip
         lip = lop
         lop = ls
c
c Build bit reversal index vector and array of coefficients
c
         call factor ( lensidim, ifac, nfac, nfmax, ipr, npr )
         call reorderm ( lensidim, irev, ifac, nfac )
         call coeffs ( lensidim, coeff )
c
c Copy d with bit reversal for first stage of FFT
c
         mask1 = lensidim - 1
         mask2 = not(lensidim-1)
c dir: ignore recrdeps(d)
         do i = 0, lentot - 1
            iseg = iand(i,mask2)
            ir = irev(iand(i,mask1))
            d(i+lip) = d(ir+lop+iseg)
         enddo
c
c Loop over array doing FFT for rest of stages
c
         if1 = lensidim
         if2 = lentot
         do ibfly = 1, nfac
            ls = lip
            lip = lop
            lop = ls
            ipfac = ifac(ibfly)
            lopfac = lentot/ipfac
c
c Now compute this butterfly
c
            if1 = if1/ipfac
            if2 = if2/ipfac
c
c Use special cases since all factors are powers of 2
c
            if ( ipfac .eq. 2 ) then
c
c Radix 2
c
c dir: ignore recrdeps(d)
               do i = 0, lopfac - 1
                  iw = if1*(i/if2)
                  temp = coeff(iw)*d(2*i+lop+1)
	          d(i+lip       ) = d(2*i+lop)+temp
	          d(i+lip+lopfac) = d(2*i+lop)-temp
               enddo
            else if ( ipfac .eq. 16 ) then
c
c Radix 16 FFT is optimum for 32-bit words in 64KB cache
c Do each radix 16 FFT with 2 radix 4 FFTs to optimize register use
c
c dir: ignore recrdeps(d)
c dir: prefer vector
               do i = 0, lopfac - 1
                  k = 16*i+lop
                  iw = if1*(i/if2)
c Set up bit reversed array of proper length
                  do j = 0, 15
                     d16(j,1) = coeff(ir16(j)*iw)*d(k+ir16(j))
                  enddo
c First radix-4
                  do j = 0, 3
                     do m = 0, 3
                        d4(m,1) = d16(m+4*j,1)
                     enddo
c First radix-2
                     do m = 0, 1
                       temp = d4(2*m+1,1)
                       d4(m  ,2) = d4(2*m,1) + temp
                       d4(m+2,2) = d4(2*m,1) - temp
                     enddo
c Twiddle for next radix-2
                     d4(3,2) = cmplx(-imag(d4(3,2)),real(d4(3,2)))
c Second radix-2
                     do m = 0, 1
                       temp = d4(2*m+1,2)
                       d4(m  ,1) = d4(2*m,2) + temp
                       d4(m+2,1) = d4(2*m,2) - temp
                     enddo
c Put back into radix-16 array
                     do m = 0, 3
                        d16(j+4*m,2) = d4(m,1)
                     enddo
                  enddo
c Twiddle for radix-4
                  t = d16( 5,2) * real(coeff(lensidim/8))
                  d16( 5,2) = cmplx(real(t)-imag(t),real(t)+imag(t))
                  d16( 9,2) = cmplx(-imag(d16( 9,2)),real(d16( 9,2)))
                  t = d16(13,2) * real(coeff(lensidim/8))
                  d16(13,2) = cmplx(-real(t)-imag(t),real(t)-imag(t))
                  d16( 6,2) = d16( 6,2) * coeff(  lensidim/16)
                  d16(10,2) = d16(10,2) * coeff(2*lensidim/16)
                  d16(14,2) = d16(14,2) * coeff(3*lensidim/16)
                  d16( 7,2) = d16( 7,2) * coeff(3*lensidim/16)
                  d16(11,2) = d16(11,2) * coeff(6*lensidim/16)
                  d16(15,2) =-d16(15,2) * coeff(  lensidim/16)
c Second radix-4
                  do j = 0, 3
                     do m = 0, 3
                        d4(m,1) = d16(m+4*j,2)
                     enddo
c First radix-2
                     do m = 0, 1
                       temp = d4(2*m+1,1)
                       d4(m  ,2) = d4(2*m,1) + temp
                       d4(m+2,2) = d4(2*m,1) - temp
                     enddo
c Twiddle for next radix-2
                     d4(3,2) = cmplx(-imag(d4(3,2)),real(d4(3,2)))
c Second radix-2
                     do m = 0, 1
                       temp = d4(2*m+1,2)
                       d4(m  ,1) = d4(2*m,2) + temp
                       d4(m+2,1) = d4(2*m,2) - temp
                     enddo
c Put back into radix-16 array
                     do m = 0, 3
                        d16(j+4*m,1) = d4(m,1)
                     enddo
                  enddo
c Put back into data array
                  do j = 0, 15
                     d(i+lip+j*lopfac) = d16(j,1)
                  enddo
               enddo
            else
               stop 'Factor not in list'
            endif
         enddo
      enddo
c
c If result is in bottom half of array, copy to top half
c
      if ( lip .ne. 0 ) then
c dir: ignore recrdeps(d)
	 do i = 0, lentot - 1
	    d(i) = d(i+lip)
         enddo
      endif
c 
c Done
c
      end
