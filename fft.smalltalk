!ArrayND methodsFor: 'math functions' stamp: 'AHK 8/7/2003 09:10'!
fftInverseShuffle: allowedFactors

   	"Compute the Fourier Transform using inverse shuffle"

   	| x |

   	x := self copy.
   	dimensions do: [ :d | | n rootsOfUnity y |
   	   	n := self size.
   	   	rootsOfUnity := 1 + 0 i roots: d.
   	   	x := x bitReverse: allowedFactors.
   	   	y := x copy.
   	   	allowedFactors do: [ :p | | k m r |
   	   	   	r := 1 + 0 i roots: p.
   	   	   	m := self size // p.
   	   	   	[d \\ p = 0] whileTrue: [
   	   	   	   	k := 1 to: p.
   	   	   	   	d := d // p.
   	   	   	   	n := n // p.
   	   	   	   	0 to: m-1 do: [ :i | | t w |
   	   	   	   	   	w := i//n*d * (0 to: p-1) +1.
   	   	   	   	   	x atAll: k putAll: (rootsOfUnity atAll: w) * (x atAll: k).
   	   	   	   	   	t := Array new: p withAll: 0.
   	   	   	   	   	0 to: p-1 do: [ :j | 
   	   	   	   	   	   	t := (r raisedTo: j) * (x at: (k at: j+1)) + t].
   	   	   	   	   	y atAll: (i+1 to: y size by: m) putAll: t.
   	   	   	   	   	k := k + p.].
   	   	   	   	x := y copy]].

   	   	d = 1 ifFalse: [ self error: 'Illegal factor'].
   	   	x := y copy: (y dimensions rotate)].   	   	
   	^ x
! !
